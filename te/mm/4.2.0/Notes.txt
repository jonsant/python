Notes:

	API:

		--Documentation is provided describing the classes and their methods in Mastermind.  These should be your first resource.  They are, to my knowledge, accurate and complete with everything you need.  I have tried to document the exceptions that may occur for every method as well as each argument's purpose.  Read the section "Networking in Mastermind", below for an indispensable background about the architecture and model Mastermind uses.
		--Most methods are not meant to be overridden except as noted in the documentation.  In every method you override, you should in the end return the value of that same method in the superclass.
		--Methods prefixed by `_mm_` are not intended for external use.  Don't use them.  Only use documented methods.

	Networking in Mastermind:

		--Mastermind is designed around the client-server model.  You start a server, and clients connect to it.  Clients DO NOT pass data directly to each other.  By polling the server for updates, each client can get updates as fast as it can process them.
		--The recommendation is to send and receive in pairs (i.e., the server sends data once for each request it gets, and the client does the same).  Other methods SHOULD work, but they have not been tested.
		--Connections are maintained, which means that some data needs to be sent across periodically or the connection will be considered dead.  The server does this through `server.time_connection_timeout`, which is set in the constructor.
		--For all classes, where appropriate, the `ip` argument may be given as `"localhost"`.
		--Where possible, Mastermind will try to fix problematic states (e.g., a connected client is destructed without first calling `.disconnect()`).  In such cases, Mastermind will automatically call the appropriate methods, and print a warning to the console.  You should always try to fix these by adding the appropriate methods yourself.  Sometimes, this is not possible, and an exception will be thrown.

	Server:

		--The `callback_*` functions are NOT thread-safe!  You MUST use mutexes to access shared data as necessary if you override them!  The Python built-in class `threading.Lock` is good for this.
		--`server.time_connection_timeout` is respected in increments of `server.time_connection_refresh` seconds.
		--`server.time_connection_timeout` cannot and should not be `None`.  Think about it--the connection would exist forever if there were a problem!
		--After `.handling_stop()` is called, the server will close in at most `server.time_server_refresh` seconds

	Tutorials:

		--The print statements in the tutorial may be somewhat out of order.  This is fine; the effect is due to the fact that the server's infinite loop is running in a different thread from the client.  While the server and client may share a console, because they do not share other things, theoretically proper concurrency is preserved.

	Legal:

		Mastermind is available under generic FOSS licenses (e.g. the zlib license is acceptable).  See the projects page on my website (geometrian.com).