Documentation:

	General:

		The namespace can be accessed with `from Mastermind import *`.  The symbols provided are:
			--MastermindClientTCP
			--MastermindClientUDP

			--MastermindServerTCP
			--MastermindServerUDP

			--MastermindServerCallbacksEcho
			--MastermindServerCallbacksDebug

			--MastermindError
			--MastermindErrorClient
			--MastermindErrorServer
			--MastermindErrorSocket

			--MM_TCP
			--MM_UDP
			--MM_MAX
			--MM_UNKNOWN

	Client Objects:

		class MastermindClientTCP:

			.__init__(timeout_connect=None,timeout_receive=None):
				--Creates a new client object.
				--The argument "timeout_connect" determines how long the .connect(...) method may wait, in seconds, for a connection before it times out ("None" to wait indefinitely).
				--The argument "timeout_receive" determines how long the .receive(...) method may wait when supplied with an argument of "True" (blocking), again, "None" to wait indefinitely.
			.__del__():
				--Destructs the client object.  Issues a MastermindWarningClient if .disconnect() was not called first.

			.connect(ip,port):
				--Connects the client to a server.  If the client is already connected, a MastermindWarningClient is issued and the call has no effect.  MastermindErrorSocket may be raised on failure.
				--The argument "ip" is the ip of the server to connect to.
				--The argument "port" is the port of the server to connect to.
			.disconnect()
				--Disconnects the client from the current connection.  If the client is already not connected, a MastermindWarningClient is issued and the call has no effect.

			.send(data,compression=None):
				--Sends data to the connected server.  Raises a MastermindErrorClient if the client is not connected or if sending fails.
				--The argument "data" is the data to send.
				--The argument "compression" can be "0", "False", or "None" to disable compression, "True" or "MM_MAX" to enable to maximum level of compression, or an integer from 0 through 9 to indicate a level of compression (0 being none, and 9 being the maximum).  Compression is accomplished through Python's built-in zlib.
			.receive(blocking=False):
				--Receives and returns data from the connected server.  Raises a MastermindErrorClient if the client is not connected, "blocking" is "True" and the operating has timed out, or if the operation otherwise fails.
				--If "blocking" is "False", then the method will return "None" if no data is immediately available (i.e., it won't wait).  If "blocking" is "True", then the method will wait for data up to the value for "timeout_receive" specified in the constructor, at which time it will raise a MastermindErrorClient exception.

		class MastermindClientUDP:

			.__init__(timeout_connect=None,timeout_receive=None):
				--See MastermindClientTCP.__init__(...).
			.__del__():
				--See MastermindClientTCP.__del__(...).

			.connect(ip,port):
				--See MastermindClientTCP.connect(...).
			.disconnect():
				--See MastermindClientTCP.disconnect().

			.send(data,compression=None):
				--See MastermindClientTCP.send(...).
			.receive(blocking=False, max_packet_size=4096):
				--See MastermindClientTCP.receive(...).
				--The argument "max_packet_size" is used to set the maximum packet receivable.  Its default, 4096, comes from a recommendaton in the Python documentation, but it can be changed.  Packets must be smaller than this number for operations to succeed.  Compression when sending can help.

	Server Objects:

		class MastermindServerTCP:

			.__init__(time_server_refresh=0.5,time_connection_refresh=0.5,time_connection_timeout=5.0):
				--Creates a new server object.
				--The argument "time_server_refresh" determines how quickly the server checks for an end condition (i.e., if you call .accepting_disallow(), "time_server_refresh" is the maximum time it will hang).  Larger numbers use less CPU time.
				--The argument "time_connection_refresh" is how fast the connection checks for an end condition (i.e., if a connection times out, "time_connection_refresh" is the maximum time past the timeout time the connection will persist).  Larger numbers use less CPU time.
				--The argument "time_connection_timeout" determines how long a connection is allowed to remain idle before being considered dead.  See "Notes.txt".
			.__del__():
				--Destructs the server object.  Issues a MastermindWarningServer if .accepting_disallow() or .disconnect() was not called first, or if there are still active connections.

			.connect(ip,port):
				--Connects the server to the network.  If the server is already connected, a MastermindWarningServer is issued and the call has no effect.  MastermindErrorSocket may be raised on failure.
				--The argument "ip" is the ip to connect as.
				--The argument "port" is the port to connect as.
			.disconnect()
				--Disconnects the server from the network.  If the server is already not connected, a MastermindWarningServer is issued and the call has no effect.  If the server is actively accepting new clients, MastermindWarningServer will be issued, and the call will proceed after automatically calling .accepting_disallow().  If there are active connections, MastermindWarningServer will be issued, and the call will proceed after automatically calling .disconnect_clients().

			.disconnect_clients():
				--Disconnects all current clients.  This is typically done before quitting the server; to be sure another client doesn't connect immediately after this call, you should call .accepting_disallow() first.

			.callback_connect():
				--Called when the server connects (i.e., when .connect(...) is successful).  This method can be overridden to provide useful information.  It's good practice to call "return super(MastermindServerTCP,self).callback_connect()" at the end of your override.
			.callback_disconnect():
				--Called when the server disconnects (i.e., when .disconnect(...) is called).  This method can be overridden to provide useful information.  It's good practice to call "return super(MastermindServerTCP,self).callback_disconnect()" at the end of your override.
			.callback_connect_client(connection_object):
				--Called when a new client connects.  This method can be overridden to provide useful information.  It's good practice to call "return super(MastermindServerTCP,self).callback_connect_client(connection_object)" at the end of your override.
				--The argument "connection_object" represents the appropriate connection.  See the "Connection Objects" section for a description of useful properites.
			.callback_disconnect_client(connection_object):
				--Called when a client disconnects.  This method can be overridden to provide useful information.  It's good practice to call "return super(MastermindServerTCP,self).callback_disconnect_client(connection_object)" at the end of your override.
				--The argument "connection_object" represents the appropriate connection.  See the "Connection Objects" section for a description of useful properites.
			.callback_client_receive(connection_object):
				--Called when data is about to be received from a connection.  A pickling or zlib error from Python is conceivable if the data is corrupted in transit.  This method can be overridden to provide useful information.  It's good practice (and in this case essential) to call "return super(MastermindServerTCP,self).callback_client_receive(connection_object)" at the end of your override.
				--The argument "connection_object" represents the appropriate connection.  See the "Connection Objects" section for a description of useful properites.
			.callback_client_handle(connection_object,data):
				--Called to handle data received from a connection.  This method is often overridden to provide custom server logic and useful information.  It's good practice (and in this case essential) to call "return super(MastermindServerTCP,self).callback_client_handle(connection_object,data)" at the end of your override.
				--The argument "connection_object" represents the appropriate connection.  See the "Connection Objects" section for a description of useful properites.
				--The argument "data" is the data that the server received from the connection.
			.callback_client_send(connection_object,data,compression=None):
				--Called to when data is about to be sent to a connection.  If sending fails, the connection is silently terminated.  This method can be overridden to provide useful information.  It's good practice (and in this case essential) to call "return super(MastermindServerTCP,self).callback_client_send(connection_object,data,compression)" at the end of your override.
				--The argument "connection_object" represents the appropriate connection.  See the "Connection Objects" section for a description of useful properites.
				--The argument "data" is the data that the server is about to send to the connection.
				--The argument "compression" determines whether the data should be compressed before sending.  See MastermindClientTCP.send(...).

			.accepting_allow():
				--Starts allowing clients to connect and create new connections to the server.
			.accepting_allow_wait_forever():
				--Uses the current thread to wait for new connections to the server and put them in their own threads.  This is used internally by .accepting_allow(), but is useful by itself if you want to start your own server in its own file, and you don't care if you don't get control back.
			.accepting_disallow():
				--Stops allowing new clients to connect.  This DOES NOT stop any current connections!  The effect of calling .accepting_allow() after this and then having a new client connect has not been tested.

		class MastermindServerUDP:

			.__init__(time_server_refresh=0.5,time_connection_refresh=0.5,time_connection_timeout=5.0, max_packet_size=4096):
				--See MastermindServerTCP.__init__(...).
			.__del__():
				--See MastermindServerTCP.__del__().

			.connect(ip,port):
				--See MastermindServerTCP.connect(...).
			.disconnect():
				--See MastermindServerTCP.disconnect().

			.disconnect_clients():
				--See MastermindServerTCP.disconnect_clients().

			.callback_connect():
				--See MastermindServerTCP.callback_connect().
			.callback_disconnect():
				--See MastermindServerTCP.callback_disconnect().
			.callback_connect_client(connection_object):
				--See MastermindServerTCP.callback_connect_client(...).
			.callback_disconnect_client(connection_object):
				--See MastermindServerTCP.callback_disconnect_client(...).
			.callback_client_receive(connection_object):
				--Called when data is about to be received from a connection.  A pickling or zlib error from Python is conceivable if the data is corrupted in transit.  This method can be overridden to provide useful information.  It's good practice to call "return super(MastermindServerUDP,self).callback_client_receive(connection_object)" at the end of your override.
				--The argument "connection_object" represents the appropriate connection.  See the "Connection Objects" section for a description of useful properites.
			.callback_client_handle(connection_object,data):
				--See MastermindServerTCP.callback_client_handle(...).
			.callback_client_send(connection_object,data,compression=None):
				--See MastermindServerTCP.callback_client_send(...).

			.accepting_allow():
				--See MastermindServerTCP.accepting_allow().
			.accepting_allow_wait_forever():
				--See MastermindServerTCP.accepting_allow_wait_forever().
			.accepting_disallow():
				--See MastermindServerTCP.accepting_disallow().

	Server Helpers:

		Note: these objects are for use in multiple inheritance with a server.  When you subclass a server, you can use these (first) in the inheritance list to get a head start.  They can be combined at your discretion.  None are servers in their own right; they must be used in an inheritance with a server to get the desired effect.  See "basic test.py" for an example.

		class MastermindServerCallbacksEcho:

			--Overrides the server's .callback_client_handle(...) method to echo data back exactly as received.

		class MastermindServerCallbacksDebug:

			--Overrides all of the the server's various .callback_*(...) methods to provide information about proceedings on the underlying network.

	Errors:

		--MastermindError:
			--Base type for Mastermind errors.
		--MastermindErrorClient:
			--Raised for errors in a client object.
		--MastermindErrorServer:
			--Raised for errors in a server object.
		--MastermindErrorSocket:
			--Raised for errors pertaining to sockets or other connectivity problems.
		
	Symbols:

		--MM_TCP:
			--Used internally, but may be of external use in the future.
		--MM_UDP:
			--Used internally, but may be of external use in the future.

		--MM_UNKNOWN:
			--The value of many classes' fields when they are unavailable.  In particular, ".ip" and ".port" are often this.

		--MM_MAX:
			--Used particularly as a valid argument to sending functions that take an argument "compression".

	Miscellaneous Global functions
		--mastermind_get_hostname():
			--Returns the hostname of this computer.

		--mastermind_get_local_ip():
			--Returns the local ip address of this computer.

	Environment Variables:
		--"MM_SERIALIZATION_TYPE":
			--User can define (e.g. with `os.environ["MM_SERIALIZATION_TYPE"] = "json"`) before importing Mastermind to choose the serialization type.  Options currently are "json" (default), "pickle" (similar, but has security problems if the network is untrusted), and "msgpack" (fastest, but requires installation with e.g. `pip install msgpack`).

	Connection Objects:

		Note: these objects are not available for direct instantiation, nor should you subclass them or add any instance variables (properties) to them.  You should only encounter them in some callback functions in the server.  The following are some useful properties.  You should not change them, as they are primarily internal state.

		<Instance Variables>:

			.server:
				--The server the connection is connected to.
			.socket:
				--The low-level socket that the connection uses.
			.address:
				--The ip and code of the connection.

			.amount_waiting:
				--The time, in seconds, since the last data received.  NOT continuously distributed; found in increments of whatever was passed into "time_connection_refresh" when the server was constructed.

			.handling:
				--Boolean variable describing whether the connection is currently active.  This will almost always be "True".

			.mutex:
				--If the server is a UDP server, this field is present.  it is an instance of threading.Lock, and is used internally to access .amount_waiting.  As an exception to the above rule, it's probably safe for you to modify it through its .acquire() and .release() methods.

		.terminate():

			--Causes the server to terminate this connection.  Usually unnecessary, as connections terminate themselves at the appropriate time.  You can use this if you just want to outright reject a client.